name: Frontend CI/CD

on:
  push:
    branches: [ Ec2-deploy ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend.yml'
  pull_request:
    branches: [ Ec2-deploy ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend.yml'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker Hub login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build & push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/dream-frontend:${{ github.sha }}

      - name: Ensure target directory exists on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            mkdir -p /home/${{ secrets.EC2_USER }}/app

      - name: Upload docker-compose.base.yml to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: docker-compose.base.yml
          target: /home/${{ secrets.EC2_USER }}/app

      - name: Deploy frontend to EC2
        uses: appleboy/ssh-action@v1.0.3
        env:
          GITHUB_SHA: ${{ github.sha }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            set -e
            cd /home/${{ secrets.EC2_USER }}/app

            # Diagnostics: show directory contents
            echo "Listing contents of app directory:"
            ls -l /home/${{ secrets.EC2_USER }}/app

            # Ensure base compose file is present
            if [ ! -f docker-compose.base.yml ]; then
              echo "ERROR: docker-compose.base.yml not found!"
              exit 1
            fi

            mkdir -p /home/${{ secrets.EC2_USER }}/app/backend
            mkdir -p /home/${{ secrets.EC2_USER }}/app/frontend

            # Create env files
            cat > /home/${{ secrets.EC2_USER }}/app/backend/.env <<'EOF'
            ${{ secrets.BACKEND_ENV }}
            EOF

            cat > /home/${{ secrets.EC2_USER }}/app/frontend/.env <<'EOF'
            ${{ secrets.FRONTEND_ENV }}
            EOF

            # Install docker + compose if missing
            if ! command -v docker >/dev/null 2>&1; then
              sudo apt-get update -y
              sudo apt-get install -y docker.io
              sudo systemctl enable docker
              sudo usermod -aG docker $USER || true
            fi
            if ! command -v docker-compose >/dev/null 2>&1; then
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" \
                -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi

            # First deployment
            if [ ! -f docker-compose.yml ]; then
              cp docker-compose.base.yml docker-compose.yml
              sed -i "s|DOCKER_USERNAME_PLACEHOLDER|${DOCKER_USERNAME}|g" docker-compose.yml
              sed -i "s|REPLACE_BACKEND_TAG|bootstrap|g" docker-compose.yml
              sed -i "s|REPLACE_FRONTEND_TAG|${GITHUB_SHA}|g" docker-compose.yml
              echo "docker-compose.yml after sed replacements:"
              cat docker-compose.yml
              docker-compose up -d db frontend
              exit 0
            fi

            # Redeployment: update only frontend image tag
            sed -i "s|${DOCKER_USERNAME}/dream-frontend:[^[:space:]]*|${DOCKER_USERNAME}/dream-frontend:${GITHUB_SHA}|g" docker-compose.yml
            echo "docker-compose.yml after frontend image update:"
            cat docker-compose.yml
            docker-compose pull frontend
            docker-compose up -d frontend