name: Deploy Frontend

on:
  push:
    branches: [ Ec2-deploy ]
    paths:
      - "frontend/**"
      - "docker-compose.yml"
      - ".github/workflows/frontend.yml"

jobs:
  deploy-frontend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set IMAGE_TAG
        run: echo "IMAGE_TAG=${GITHUB_SHA}" >> $GITHUB_ENV

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and push frontend image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/dream-frontend:${GITHUB_SHA} frontend
          docker tag ${{ secrets.DOCKER_USERNAME }}/dream-frontend:${GITHUB_SHA} ${{ secrets.DOCKER_USERNAME }}/dream-frontend:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/dream-frontend:${GITHUB_SHA}
          docker push ${{ secrets.DOCKER_USERNAME }}/dream-frontend:latest

      - name: Upload docker-compose.yml to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: "docker-compose.yml"
          target: "~/app/"

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            mkdir -p ~/app
            cat > ~/app/.env <<EOL
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}
            REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }}
            DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
            IMAGE_TAG=${GITHUB_SHA}
            EOL
            if ! docker compose version &>/dev/null; then
              sudo apt-get update
              sudo apt-get install -y docker-compose-plugin
            fi
            docker compose -f ~/app/docker-compose.yml pull frontend
            docker compose -f ~/app/docker-compose.yml up -d frontend
