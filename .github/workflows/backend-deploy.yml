name: Build and Deploy Backend to EC2
on:
  push:
    branches:
      - Ec2-deploy
    paths:
      - 'backend/**'
      - 'docker-compose.yml'
      - '.github/workflows/backend-deploy.yml'
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Set IMAGE_TAG
        run: echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV
      - name: Cache Docker Layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: ${{ runner.os }}-buildx-
      - name: Cache npm Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('backend/package-lock.json') }}
          restore-keys: ${{ runner.os }}-npm-
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
      - name: Build Backend Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/dream-vacation-app-backend:${{ env.IMAGE_TAG }} ./backend
          docker tag ${{ secrets.DOCKER_USERNAME }}/dream-vacation-app-backend:${{ env.IMAGE_TAG }} ${{ secrets.DOCKER_USERNAME }}/dream-vacation-app-backend:latest
      - name: Push Backend Image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/dream-vacation-app-backend:${{ env.IMAGE_TAG }}
          docker push ${{ secrets.DOCKER_USERNAME }}/dream-vacation-app-backend:latest
      - name: Upload docker-compose.yml to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: "docker-compose.yml"
          target: "/home/ubuntu/app"
      - name: Deploy Backend and DB on EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          envs: IMAGE_TAG
          script: |
            mkdir -p /home/ubuntu/app
            cd /home/ubuntu/app
            env_content="IMAGE_TAG=${IMAGE_TAG}
            DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            POSTGRES_PORT=5432
            COUNTRIES_API_BASE_URL=https://restcountries.com/v3.1
            REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }}"
            if [ ! -f .env ] || [ "$(cat .env)" != "$env_content" ]; then
              echo "$env_content" > .env
            fi
            whoami
            docker ps -a
            docker rm -f app-backend-1 app-db-1 || true
            docker network rm app-network || true
            docker-compose -p app pull backend db
            docker-compose -p app up -d backend db --remove-orphans
            sleep 10
            docker-compose -p app ps | grep "Up" || { echo "Backend or DB container failed to start"; exit 1; }
            docker inspect app-backend-1 | grep -q '"Running": true' || { echo "Backend container is not running"; docker logs app-backend-1; exit 1; }