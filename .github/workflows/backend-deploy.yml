name: Build and Deploy Backend to EC2
on:
  push:
    branches:
      - Ec2-deploy
    paths:
      - 'backend/**'
      - 'docker-compose.yml'
      - '.github/workflows/backend-deploy.yml'
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Set IMAGE_TAG
        run: echo "IMAGE_TAG=${GITHUB_SHA}" >> $GITHUB_ENV
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
      - name: Build Backend Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/dream-vacation-app-backend:${IMAGE_TAG} ./backend
          docker tag ${{ secrets.DOCKER_USERNAME }}/dream-vacation-app-backend:${IMAGE_TAG} ${{ secrets.DOCKER_USERNAME }}/dream-vacation-app-backend:latest
      - name: Push Backend Image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/dream-vacation-app-backend:${IMAGE_TAG}
          docker push ${{ secrets.DOCKER_USERNAME }}/dream-vacation-app-backend:latest
      - name: Upload docker-compose.yml to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: "docker-compose.yml"
          target: "/home/***/app"
      - name: Deploy on EC2 via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          envs: IMAGE_TAG
          script: |
            mkdir -p /home/***/app
            cd /home/***/app
            lockfile="/home/***/app/deploy.lock"
            for i in {1..60}; do
              if test -f "$lockfile"; then
                lock_pid=$(cat "$lockfile")
                if ! ps -p "$lock_pid" > /dev/null; then
                  echo "Removing stale lock file with PID $lock_pid"
                  rm -f "$lockfile"
                fi
              fi
              if ! test -f "$lockfile"; then
                echo $$ > "$lockfile"
                break
              fi
              sleep 2
            done
            if test -f "$lockfile" && cat "$lockfile" | grep -q $$; then
              env_content="IMAGE_TAG=${IMAGE_TAG}
              DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
              POSTGRES_USER=${{ secrets.POSTGRES_USER }}
              POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
              POSTGRES_DB=${{ secrets.POSTGRES_DB }}
              POSTGRES_PORT=5432
              COUNTRIES_API_BASE_URL=https://restcountries.com/v3.1
              REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }}"
              if [ ! -f .env ] || [ "$(cat .env)" != "$env_content" ]; then
                echo "$env_content" > .env
              fi
              whoami
              sudo docker ps -a
              sudo docker rm -f app-backend-1 app-db-1 || true
              sudo docker network rm app-network || true
              sudo docker-compose -p app pull backend db
              sudo docker-compose -p app up -d backend db --remove-orphans
              sudo docker-compose -p app ps | grep "Up" || { echo "Backend or DB container failed to start"; exit 1; }
              rm -f "$lockfile"
            else
              echo "Another deployment is in progress, exiting"
              exit 1
            fi